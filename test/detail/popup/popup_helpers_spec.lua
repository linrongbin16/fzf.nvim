local cwd = vim.fn.getcwd()

describe("detail.popup.popup_helpers", function()
  local assert_eq = assert.is_equal
  local assert_true = assert.is_true
  local assert_false = assert.is_false

  before_each(function()
    vim.api.nvim_command("cd " .. cwd)
    vim.opt.swapfile = false
  end)

  local tables = require("fzfx.commons.tables")
  local strings = require("fzfx.commons.strings")
  local popup_helpers = require("fzfx.detail.popup.popup_helpers")

  describe("[WindowOptsContext]", function()
    it("save", function()
      local ctx = popup_helpers.WindowOptsContext:save()
      assert_eq(type(ctx), "table")
    end)
    it("restore", function()
      local ctx = popup_helpers.WindowOptsContext:save()
      assert_eq(type(ctx), "table")
      ctx:restore()
    end)
  end)
  describe("[ShellOptsContext]", function()
    it("save", function()
      local ctx = popup_helpers.ShellOptsContext:save()
      assert_eq(type(ctx), "table")
    end)
    it("restore", function()
      local ctx = popup_helpers.ShellOptsContext:save()
      assert_eq(type(ctx), "table")
      ctx:restore()
    end)
  end)
  describe("[get_window_size]", function()
    it("is in range of [0, 1]", function()
      assert_eq(5, popup_helpers.get_window_size(0.5, 10))
      assert_eq(6, popup_helpers.get_window_size(0.6, 10))
      assert_eq(7, popup_helpers.get_window_size(0.7, 10))
      assert_eq(8, popup_helpers.get_window_size(0.8, 10))
      assert_eq(9, popup_helpers.get_window_size(0.9, 10))
      assert_eq(9, popup_helpers.get_window_size(0.91, 10))
      assert_eq(9, popup_helpers.get_window_size(0.92, 10))
      assert_eq(9, popup_helpers.get_window_size(0.93, 10))
      assert_eq(9, popup_helpers.get_window_size(0.94, 10))
      assert_eq(9, popup_helpers.get_window_size(0.95, 10))
      assert_eq(9, popup_helpers.get_window_size(0.96, 10))
      assert_eq(9, popup_helpers.get_window_size(0.97, 10))
      assert_eq(9, popup_helpers.get_window_size(0.98, 10))
      assert_eq(9, popup_helpers.get_window_size(0.99, 10))
      assert_eq(10, popup_helpers.get_window_size(1, 10))
    end)
    it("is greater than 1", function()
      assert_eq(3, popup_helpers.get_window_size(2, 10))
      assert_eq(3, popup_helpers.get_window_size(2, 10))
      assert_eq(3, popup_helpers.get_window_size(3, 10))
      assert_eq(4, popup_helpers.get_window_size(4, 10))
      assert_eq(8, popup_helpers.get_window_size(8, 10))
      assert_eq(9, popup_helpers.get_window_size(9, 10))
      assert_eq(10, popup_helpers.get_window_size(10, 10))
      assert_eq(10, popup_helpers.get_window_size(11, 10))
      assert_eq(10, popup_helpers.get_window_size(12, 10))
    end)
  end)
  describe("[shift_window_pos]", function()
    it("is in range of [0, 1]", function()
      assert_eq(12, popup_helpers.shift_window_pos(50, 30, 0.1))
      assert_eq(10, popup_helpers.shift_window_pos(50, 30, 0))
      assert_eq(0, popup_helpers.shift_window_pos(50, 25, -0.5))
      assert_eq(24, popup_helpers.shift_window_pos(50, 25, 0.5))
    end)
    it("is greater than 1", function()
      assert_eq(12, popup_helpers.shift_window_pos(50, 30, 2))
      assert_eq(10, popup_helpers.shift_window_pos(50, 30, 0))
      assert_eq(0, popup_helpers.shift_window_pos(50, 20, -15))
      assert_eq(30, popup_helpers.shift_window_pos(50, 20, 15))
    end)
  end)
end)
